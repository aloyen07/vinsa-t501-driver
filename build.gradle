plugins {
    id 'java'
}

group = 'ru.aloyenz.t501.driver'
version = '1.0-SNAPSHOT'
def libusbSo = '/usr/lib/x86_64-linux-gnu/libusb-1.0.so'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // https://mvnrepository.com/artifact/org.usb4java/usb4java
    implementation 'org.usb4java:usb4java:1.3.0'

    implementation 'com.google.code.gson:gson:2.13.2'

    implementation 'org.slf4j:slf4j-api:2.0.13'
    runtimeOnly 'org.slf4j:slf4j-simple:2.0.13'
}

tasks.register('generateHeaders', Exec) {
    dependsOn compileJava
    description = 'Generate JNI header files'
    def outputDir = file("src/main/c")
    commandLine "javac", "-h", outputDir, "src/main/java/ru/aloyenz/t501/driver/LibUsbDeattacher.java"
}

tasks.register('buildNativeLibs') {
    description = 'Compile native JNI libraries'
    dependsOn buildVPenLib, buildVKeyboardLib, buildVMouseLib
}

tasks.register('buildVPenLib', Exec) {
    description = 'Build libvpen.so'
    def outputDir = file("$buildDir/native")
    outputs.dir(outputDir)
    doFirst { outputDir.mkdirs() }

    def jdkHomeDir = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }.get().metadata.installationPath.asFile.absolutePath

    def jniInclude = "${jdkHomeDir}/include"
    def jniIncludeOs = org.gradle.internal.os.OperatingSystem.current().isWindows() ? "win32" :
            org.gradle.internal.os.OperatingSystem.current().isMacOsX() ? "darwin" : "linux"
    def includeLibusb = "/usr/include/libusb-1.0"

    commandLine 'gcc',
            "-I${jniInclude}", "-I${jniInclude}/${jniIncludeOs}",
            "-I${includeLibusb}",
            '-shared', '-fPIC', '-o', "${outputDir}/libvpen.so",
            'src/main/c/libvpen.c',
            libusbSo
}


tasks.register('buildVKeyboardLib', Exec) {
    description = 'Build libvkeyboard.so'
    def outputDir = file("$buildDir/native")
    outputs.dir(outputDir)
    doFirst { outputDir.mkdirs() }

    def jdkHomeDir = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }.get().metadata.installationPath.asFile.absolutePath

    def jniInclude = "${jdkHomeDir}/include"
    def jniIncludeOs = org.gradle.internal.os.OperatingSystem.current().isWindows() ? "win32" :
            org.gradle.internal.os.OperatingSystem.current().isMacOsX() ? "darwin" : "linux"
    def includeLibusb = "/usr/include/libusb-1.0"

    commandLine 'gcc',
            "-I${jniInclude}", "-I${jniInclude}/${jniIncludeOs}",
            "-I${includeLibusb}",
            '-shared', '-fPIC', '-o', "${outputDir}/libvkeyboard.so",
            'src/main/c/libvkeyboard.c'
}

tasks.register('buildVMouseLib', Exec) {
    description = 'Build libvmouse.so'
    def outputDir = file("$buildDir/native")
    outputs.dir(outputDir)
    doFirst { outputDir.mkdirs() }

    def jdkHomeDir = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }.get().metadata.installationPath.asFile.absolutePath

    def jniInclude = "${jdkHomeDir}/include"
    def jniIncludeOs = org.gradle.internal.os.OperatingSystem.current().isWindows() ? "win32" :
            org.gradle.internal.os.OperatingSystem.current().isMacOsX() ? "darwin" : "linux"
    def includeLibusb = "/usr/include/libusb-1.0"

    commandLine 'gcc',
            "-I${jniInclude}", "-I${jniInclude}/${jniIncludeOs}",
            "-I${includeLibusb}",
            '-shared', '-fPIC', '-o', "${outputDir}/libvmouse.so",
            'src/main/c/libvmouse.c'
}


test {
    useJUnitPlatform()
}